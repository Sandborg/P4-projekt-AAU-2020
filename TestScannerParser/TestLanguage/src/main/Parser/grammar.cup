import java_cup.runtime.*;
import lab7.*;
import java.io.FileWriter;
import java.io.IOException;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

action code {:

   public JSONArray allNodes = new JSONArray();
   public JSONArray allNodesUnderProg = new JSONArray();
   public JSONArray expressions = new JSONArray();

      public AbstractNode addAllNodesToJSON (AbstractNode n) {
          if(n.getChild() != null) {
              n.node.put("Body", AddAllChild(n.getChild(),new JSONArray()));
              allNodes.add(n.node);
          }
          return null;
      }

      public JSONArray AddAllChild (AbstractNode n, JSONArray array) {
          array.add(n.node);
          if(n.getSib() != null) {

              AddAllChild(n.getSib(),array);
              System.out.println(array);
          }
          return array;
      }
   class BinaryOPNode extends AbstractNode {
         AbstractNode number1;
         AbstractNode number2;
         String operator;

         public BinaryOPNode (AbstractNode number1, AbstractNode number2, String operator) {
            this.number1 = number1;
            this.number2 = number2;
            this.operator = operator;


            node.put("left", number1.node);
            node.put("right", number2.node);
            node.put("type", "BinaryExpression");
            node.put("operator", operator);

         }
         public String getName() {return number1 + " " + operator + " " + number2;}
   }
   class NumberNode extends AbstractNode {
        int value;
        public NumberNode(int value) {
            this.value = value;
            node.put("type", "Literal");
            node.put("value", value);

        }

        public int getValue() {return value;}
   }

   class SingleNode extends AbstractNode {
         String name;


         public SingleNode(String name) {
            this.name = name;
         }
         public String getName() {return name;}
   }

   public AbstractNode makeNode(AbstractNode number1, AbstractNode number2, String operator) {return new BinaryOPNode(number1,number2, operator);}
   public AbstractNode makeNode(int value) {return new NumberNode(value);}
   public AbstractNode makeNode(String name) {return new SingleNode(name);}
:};
/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, MINUS, TIMES, DIVIDE, MOD;
terminal Integer    NUMBER;        // our scanner provides numbers as integers

non terminal AbstractNode CompilationUnit;
non terminal AbstractNode expr_list;
non terminal AbstractNode expr;      // used to store evaluated subexpressions

/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
/* The grammar rules */

start with CompilationUnit;

CompilationUnit ::= expr_list:el
{:

    AbstractNode prog = makeNode("prog");

    prog.node.put("type", "Program");

    prog.adoptChildren(el);
    addAllNodesToJSON(prog);


     try (FileWriter file = new FileWriter("ast.json")) {
                //We can write any JSONArray or JSONObject instance to the file
                file.write(allNodes.toJSONString());
                file.flush();

     } catch (IOException e) {
         e.printStackTrace();
     }
:};

expr_list ::= expr_list:el expr:e SEMI {: RESULT = el.makeSibling(e); :}
            | expr:e SEMI              {: RESULT = e; :}
	    	;
	    
expr      ::= expr:e1 PLUS  expr:e2
            {: RESULT = makeNode(e1, e2, "+"); :}
	    	| expr:e1 MINUS expr:e2
	    	{: RESULT = makeNode(e1, e2, "-"); :}
	    	| expr:e1 TIMES expr:e2
	    	{: RESULT = makeNode(e1, e2, "*"); :}
	    	| expr:e1 DIVIDE expr:e2
            {: RESULT = makeNode(e1, e2, "/"); :}
            | expr:e1 MOD expr:e2
            {: RESULT = makeNode(e1, e2, "%"); :}
	    	| NUMBER:n
	    	{: RESULT = makeNode(n); :}
	    	| MINUS expr:e
            ;
