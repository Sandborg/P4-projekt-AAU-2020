import java_cup.runtime.*;
import lab7.*;
import AST.*;
import java.io.FileWriter;
import java.io.IOException;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

action code {:

   public JSONArray allNodes = new JSONArray();
   public JSONArray allNodesUnderProg = new JSONArray();
   public JSONArray expressions = new JSONArray();

   public AbstractNode prog;
      public AbstractNode addAllNodesToJSON (AbstractNode n, boolean addToList) {
                     if(n.getChild() != null) {
                         n.node.put("Body", AddAllChild(n.getChild(),new JSONArray()));
                         if(addToList) {
                             allNodes.add(n.node);
                         }
                     }
                     return null;
                 }

                 public JSONArray AddAllChild (AbstractNode n, JSONArray array) {
                     array.add(n.node);
                     if(n.getChild() != null)
                     {
                         addAllNodesToJSON(n,false);
                     }

                     if(n.getSib() != null) {
                         AddAllChild(n.getSib(),array);
                     }
                     return array;
                 }

   public AbstractNode makeNode(AbstractNode number1, AbstractNode number2, String operator) {return new BinaryOPNode(number1,number2, operator);}
   public AbstractNode makeNode(int value) {return new IntegerNode(value);}
   public AbstractNode makeNode(float value) {return new FloatNode(value);}
   public AbstractNode makeNode(String name) {return new SingleNode(name);}
   public AbstractNode makeNode(AbstractNode type, AbstractNode id, AbstractNode body) {return new VariableDeclarationNode(type,id, body);}

   public AbstractNode makeTypeNode(String type) {return new TypeNode(type);}
   public AbstractNode makeIdentifierNode(String id) {return new IdentifierNode(id);}
:};
/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, MINUS, TIMES, DIVIDE, MOD, EQUALS;
terminal Integer    INTEGER;        // our scanner provides numbers as integers
terminal Float      DECIMAL;
terminal String     IDENTIFIER;
terminal            INT_TYPE, DECIMAL_TYPE;

non terminal AbstractNode CompilationUnit;
non terminal AbstractNode expr_list;
non terminal AbstractNode expr;      // used to store evaluated subexpressions
non terminal AbstractNode TypeDeclarations;
non terminal AbstractNode TypeDeclaration;
non terminal AbstractNode TypeName;
non terminal AbstractNode Identifier;
/* Precedences */
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE, MOD;
/* The grammar rules */

start with CompilationUnit;

CompilationUnit ::= TypeDeclarations:td
{:
    prog = new ProgramNode(td);
    prog.node.put("type", "Program");

    prog.adoptChildren(td);
    addAllNodesToJSON(prog,true);


     try (FileWriter file = new FileWriter("ast.json")) {
                //We can write any JSONArray or JSONObject instance to the file
                file.write(allNodes.toJSONString());
                file.flush();

     } catch (IOException e) {
         e.printStackTrace();
     }
:};

TypeDeclarations ::= TypeDeclaration: td
                 {:  RESULT = td; :}
                 |   TypeDeclarations:tds TypeDeclaration:td
                 {:  RESULT = tds.makeSibling(td); :}
                 |   expr_list:el
                 {:  RESULT = el; :}
                 ;

TypeDeclaration ::= TypeName:tn Identifier:id SEMI
                {: RESULT = makeNode(tn,id,makeNode("lol")); :}
                |   TypeName:tn Identifier:id EQUALS expr_list:el
                {: RESULT = makeNode(tn,id,el); :}
                ;

expr_list ::= expr_list:el expr:e SEMI {: RESULT = el.makeSibling(e); :}
            | expr:e SEMI              {: RESULT = e; :}
	    	;
	    
expr      ::= expr:e1 PLUS  expr:e2
            {: RESULT = makeNode(e1, e2, "+"); :}
	    	| expr:e1 MINUS expr:e2
	    	{: RESULT = makeNode(e1, e2, "-"); :}
	    	| expr:e1 TIMES expr:e2
	    	{: RESULT = makeNode(e1, e2, "*"); :}
	    	| expr:e1 DIVIDE expr:e2
            {: RESULT = makeNode(e1, e2, "/"); :}
            | expr:e1 MOD expr:e2
            {: RESULT = makeNode(e1, e2, "%"); :}
	    	| INTEGER:n
	    	{: RESULT = makeNode(n); :}
	    	| DECIMAL:n
	    	{: RESULT = makeNode(n); :}
	    	| MINUS expr:e
            ;

Identifier  ::= IDENTIFIER:id
            {: RESULT = makeIdentifierNode(id); :}
            ;

TypeName    ::= INT_TYPE:type
            {: RESULT = makeTypeNode("int"); :}
            |  DECIMAL_TYPE:type
            {: RESULT = makeTypeNode("decimal"); :}
            ;