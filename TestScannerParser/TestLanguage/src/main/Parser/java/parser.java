
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat May 22 13:14:03 CEST 2021
//----------------------------------------------------

import AST.*;
import java.io.FileWriter;
import java.io.IOException;
import org.json.simple.JSONArray;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat May 22 13:14:03 CEST 2021
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\004\000\002\002\003\000\002\024" +
    "\003\000\002\024\004\000\002\024\005\000\002\024\004" +
    "\000\002\007\003\000\002\007\004\000\002\010\005\000" +
    "\002\005\003\000\002\005\004\000\002\006\011\000\002" +
    "\006\010\000\002\006\011\000\002\006\010\000\002\013" +
    "\003\000\002\013\005\000\002\014\004\000\002\015\003" +
    "\000\002\015\005\000\002\016\003\000\002\003\003\000" +
    "\002\003\004\000\002\004\003\000\002\004\003\000\002" +
    "\004\004\000\002\004\004\000\002\004\003\000\002\004" +
    "\003\000\002\021\011\000\002\021\015\000\002\022\014" +
    "\000\002\022\015\000\002\023\005\000\002\023\005\000" +
    "\002\023\003\000\002\040\006\000\002\040\005\000\002" +
    "\011\003\000\002\011\004\000\002\012\003\000\002\012" +
    "\004\000\002\012\004\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\036\005\000" +
    "\002\017\005\000\002\017\007\000\002\041\012\000\002" +
    "\041\011\000\002\041\011\000\002\041\010\000\002\041" +
    "\012\000\002\041\011\000\002\041\011\000\002\041\010" +
    "\000\002\020\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\006\000\002\025\005\000\002\025" +
    "\003\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\032\003\000\002\031\003\000\002\031\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\037\003" +
    "\000\002\034\003\000\002\035\003\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\036\031\045\032\037\033\023\035\013\036" +
    "\007\037\030\040\051\041\014\042\040\043\004\044\034" +
    "\045\032\046\022\047\031\001\002\000\040\004\uffab\005" +
    "\uffab\006\uffab\007\uffab\010\uffab\011\uffab\014\uffab\017\uffab" +
    "\021\uffab\023\uffab\024\uffab\025\uffab\026\uffab\027\uffab\030" +
    "\uffab\001\002\000\036\031\045\032\037\033\023\035\013" +
    "\036\007\037\030\040\051\041\014\042\040\043\004\044" +
    "\034\045\032\046\022\047\031\001\002\000\040\004\uffb9" +
    "\005\uffb9\006\uffb9\007\uffb9\010\uffb9\011\uffb9\014\uffb9\017" +
    "\uffb9\021\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9" +
    "\030\uffb9\001\002\000\040\004\uffad\005\uffad\006\uffad\007" +
    "\uffad\010\uffad\011\uffad\014\uffad\017\uffad\021\uffad\023\uffad" +
    "\024\uffad\025\uffad\026\uffad\027\uffad\030\uffad\001\002\000" +
    "\004\040\051\001\002\000\034\002\uffe5\033\uffe5\035\uffe5" +
    "\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044" +
    "\uffe5\045\uffe5\046\uffe5\047\uffe5\001\002\000\040\004\uffb5" +
    "\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011\uffb5\014\uffb5\017" +
    "\uffb5\021\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5" +
    "\030\uffb5\001\002\000\004\013\222\001\002\000\042\004" +
    "\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\011\uffb2\012\uffb2" +
    "\014\uffb2\017\uffb2\021\uffb2\023\uffb2\024\uffb2\025\uffb2\026" +
    "\uffb2\027\uffb2\030\uffb2\001\002\000\004\002\000\001\002" +
    "\000\034\002\uffe6\033\uffe6\035\uffe6\036\uffe6\037\uffe6\040" +
    "\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6" +
    "\047\uffe6\001\002\000\034\031\045\033\023\035\013\036" +
    "\007\037\030\040\051\041\014\042\040\043\004\044\034" +
    "\045\032\046\022\047\031\001\002\000\034\002\uffff\033" +
    "\023\035\013\036\007\037\030\040\051\041\014\042\040" +
    "\043\004\044\034\045\032\046\022\047\031\001\002\000" +
    "\004\013\207\001\002\000\004\040\uffae\001\002\000\004" +
    "\013\170\001\002\000\022\004\167\005\132\006\135\021" +
    "\136\025\131\026\127\027\133\030\130\001\002\000\040" +
    "\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba\014" +
    "\uffba\017\uffba\021\uffba\023\uffba\024\uffba\025\uffba\026\uffba" +
    "\027\uffba\030\uffba\001\002\000\034\002\uffea\033\uffea\035" +
    "\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea" +
    "\044\uffea\045\uffea\046\uffea\047\uffea\001\002\000\004\002" +
    "\166\001\002\000\040\004\uffac\005\uffac\006\uffac\007\uffac" +
    "\010\uffac\011\uffac\014\uffac\017\uffac\021\uffac\023\uffac\024" +
    "\uffac\025\uffac\026\uffac\027\uffac\030\uffac\001\002\000\010" +
    "\040\uffaf\041\uffaf\042\uffaf\001\002\000\010\040\uffb0\041" +
    "\uffb0\042\uffb0\001\002\000\036\031\ufffb\032\ufffb\033\ufffb" +
    "\035\ufffb\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043" +
    "\ufffb\044\ufffb\045\ufffb\046\ufffb\047\ufffb\001\002\000\010" +
    "\040\uffb1\041\uffb1\042\uffb1\001\002\000\032\004\uffb7\005" +
    "\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\164\021\uffb7" +
    "\025\uffb7\026\uffb7\027\uffb7\030\uffb7\001\002\000\034\002" +
    "\uffec\033\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec" +
    "\042\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec\001" +
    "\002\000\004\043\004\001\002\000\042\004\uffb3\005\uffb3" +
    "\006\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\014\uffb3\017" +
    "\uffb3\021\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3" +
    "\030\uffb3\001\002\000\004\040\051\001\002\000\034\002" +
    "\uffe9\033\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9" +
    "\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\001" +
    "\002\000\004\004\106\001\002\000\040\004\uffb6\005\uffb6" +
    "\006\uffb6\007\uffb6\010\uffb6\011\uffb6\014\uffb6\017\uffb6\021" +
    "\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6" +
    "\001\002\000\012\044\034\045\032\046\022\047\031\001" +
    "\002\000\040\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8" +
    "\011\uffb8\014\uffb8\017\uffb8\021\uffb8\023\uffb8\024\uffb8\025" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\001\002\000\040\004\uffbe" +
    "\005\uffbe\006\uffbe\007\054\010\053\011\052\014\uffbe\017" +
    "\uffbe\021\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe" +
    "\030\uffbe\001\002\000\034\031\ufff8\033\ufff8\035\ufff8\036" +
    "\ufff8\037\ufff8\040\ufff8\041\ufff8\042\ufff8\043\ufff8\044\ufff8" +
    "\045\ufff8\046\ufff8\047\ufff8\001\002\000\010\004\uffb4\012" +
    "\uffb4\013\uffb4\001\002\000\016\036\007\037\030\040\051" +
    "\041\014\042\040\043\004\001\002\000\016\036\007\037" +
    "\030\040\051\041\014\042\040\043\004\001\002\000\016" +
    "\036\007\037\030\040\051\041\014\042\040\043\004\001" +
    "\002\000\040\004\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd" +
    "\011\uffbd\014\uffbd\017\uffbd\021\uffbd\023\uffbd\024\uffbd\025" +
    "\uffbd\026\uffbd\027\uffbd\030\uffbd\001\002\000\040\004\uffb7" +
    "\005\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\014\uffb7\017" +
    "\uffb7\021\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027\uffb7" +
    "\030\uffb7\001\002\000\040\004\uffbc\005\uffbc\006\uffbc\007" +
    "\uffbc\010\uffbc\011\uffbc\014\uffbc\017\uffbc\021\uffbc\023\uffbc" +
    "\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\001\002\000" +
    "\040\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010\uffbb\011\uffbb" +
    "\014\uffbb\017\uffbb\021\uffbb\023\uffbb\024\uffbb\025\uffbb\026" +
    "\uffbb\027\uffbb\030\uffbb\001\002\000\004\040\051\001\002" +
    "\000\004\040\051\001\002\000\004\013\064\001\002\000" +
    "\012\014\070\044\034\045\032\047\031\001\002\000\006" +
    "\041\014\042\040\001\002\000\006\014\ufff2\017\ufff2\001" +
    "\002\000\006\014\073\017\072\001\002\000\004\004\071" +
    "\001\002\000\034\031\ufff5\033\ufff5\035\ufff5\036\ufff5\037" +
    "\ufff5\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5" +
    "\046\ufff5\047\ufff5\001\002\000\010\044\034\045\032\047" +
    "\031\001\002\000\004\004\074\001\002\000\034\031\ufff6" +
    "\033\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042" +
    "\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\001\002" +
    "\000\006\014\ufff1\017\ufff1\001\002\000\006\014\ufff0\017" +
    "\ufff0\001\002\000\004\013\100\001\002\000\012\014\102" +
    "\044\034\045\032\047\031\001\002\000\006\014\104\017" +
    "\072\001\002\000\004\004\103\001\002\000\034\031\ufff3" +
    "\033\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3\042" +
    "\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\047\ufff3\001\002" +
    "\000\004\004\105\001\002\000\034\031\ufff4\033\ufff4\035" +
    "\ufff4\036\ufff4\037\ufff4\040\ufff4\041\ufff4\042\ufff4\043\ufff4" +
    "\044\ufff4\045\ufff4\046\ufff4\047\ufff4\001\002\000\034\002" +
    "\uffe7\033\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7" +
    "\042\uffe7\043\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\001" +
    "\002\000\004\013\110\001\002\000\012\014\112\044\034" +
    "\045\032\047\031\001\002\000\006\014\155\017\072\001" +
    "\002\000\004\015\113\001\002\000\036\016\126\020\121" +
    "\033\023\035\013\036\007\037\030\040\051\041\014\042" +
    "\040\043\004\044\034\045\032\046\022\047\031\001\002" +
    "\000\036\016\uffd6\020\uffd6\033\uffd6\035\uffd6\036\uffd6\037" +
    "\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6" +
    "\046\uffd6\047\uffd6\001\002\000\004\004\154\001\002\000" +
    "\036\016\uffdb\020\uffdb\033\uffdb\035\uffdb\036\uffdb\037\uffdb" +
    "\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046" +
    "\uffdb\047\uffdb\001\002\000\036\016\153\020\121\033\023" +
    "\035\013\036\007\037\030\040\051\041\014\042\040\043" +
    "\004\044\034\045\032\046\022\047\031\001\002\000\036" +
    "\016\uffd4\020\uffd4\033\uffd4\035\uffd4\036\uffd4\037\uffd4\040" +
    "\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4" +
    "\047\uffd4\001\002\000\016\036\007\037\030\040\051\041" +
    "\014\042\040\043\004\001\002\000\036\016\uffd3\020\uffd3" +
    "\033\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\001\002" +
    "\000\022\004\134\005\132\006\135\021\136\025\131\026" +
    "\127\027\133\030\130\001\002\000\036\016\uffd5\020\uffd5" +
    "\033\uffd5\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042" +
    "\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\047\uffd5\001\002" +
    "\000\036\016\uffd9\020\uffd9\033\uffd9\035\uffd9\036\uffd9\037" +
    "\uffd9\040\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9" +
    "\046\uffd9\047\uffd9\001\002\000\040\002\uffcc\016\uffcc\020" +
    "\uffcc\033\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc\041\uffcc" +
    "\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\047\uffcc\001" +
    "\002\000\016\036\007\037\030\040\051\041\014\042\040" +
    "\043\004\001\002\000\016\036\007\037\030\040\051\041" +
    "\014\042\040\043\004\001\002\000\016\036\007\037\030" +
    "\040\051\041\014\042\040\043\004\001\002\000\016\036" +
    "\007\037\030\040\051\041\014\042\040\043\004\001\002" +
    "\000\016\036\007\037\030\040\051\041\014\042\040\043" +
    "\004\001\002\000\036\016\uffd8\020\uffd8\033\uffd8\035\uffd8" +
    "\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044" +
    "\uffd8\045\uffd8\046\uffd8\047\uffd8\001\002\000\016\036\007" +
    "\037\030\040\051\041\014\042\040\043\004\001\002\000" +
    "\020\022\140\036\007\037\030\040\051\041\014\042\040" +
    "\043\004\001\002\000\040\004\uffbf\005\uffbf\006\uffbf\007" +
    "\054\010\053\011\052\014\uffbf\017\uffbf\021\uffbf\023\uffbf" +
    "\024\uffbf\025\uffbf\026\uffbf\027\uffbf\030\uffbf\001\002\000" +
    "\016\036\007\037\030\040\051\041\014\042\040\043\004" +
    "\001\002\000\040\004\uffc0\005\uffc0\006\uffc0\007\054\010" +
    "\053\011\052\014\uffc0\017\uffc0\021\uffc0\023\uffc0\024\uffc0" +
    "\025\uffc0\026\uffc0\027\uffc0\030\uffc0\001\002\000\040\004" +
    "\uffc5\005\uffc5\006\uffc5\007\054\010\053\011\052\014\uffc5" +
    "\017\uffc5\021\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027" +
    "\uffc5\030\uffc5\001\002\000\040\004\uffc1\005\uffc1\006\uffc1" +
    "\007\054\010\053\011\052\014\uffc1\017\uffc1\021\uffc1\023" +
    "\uffc1\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\001\002" +
    "\000\040\004\uffc6\005\uffc6\006\uffc6\007\054\010\053\011" +
    "\052\014\uffc6\017\uffc6\021\uffc6\023\uffc6\024\uffc6\025\uffc6" +
    "\026\uffc6\027\uffc6\030\uffc6\001\002\000\040\004\uffc2\005" +
    "\uffc2\006\uffc2\007\054\010\053\011\052\014\uffc2\017\uffc2" +
    "\021\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2\030" +
    "\uffc2\001\002\000\040\004\uffc3\005\uffc3\006\uffc3\007\054" +
    "\010\053\011\052\014\uffc3\017\uffc3\021\uffc3\023\uffc3\024" +
    "\uffc3\025\uffc3\026\uffc3\027\uffc3\030\uffc3\001\002\000\040" +
    "\004\uffc4\005\uffc4\006\uffc4\007\054\010\053\011\052\014" +
    "\uffc4\017\uffc4\021\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4" +
    "\027\uffc4\030\uffc4\001\002\000\022\004\151\005\132\006" +
    "\135\021\136\025\131\026\127\027\133\030\130\001\002" +
    "\000\036\016\uffd2\020\uffd2\033\uffd2\035\uffd2\036\uffd2\037" +
    "\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2" +
    "\046\uffd2\047\uffd2\001\002\000\036\016\uffda\020\uffda\033" +
    "\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda" +
    "\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda\001\002\000" +
    "\040\002\uffcd\016\uffcd\020\uffcd\033\uffcd\035\uffcd\036\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045" +
    "\uffcd\046\uffcd\047\uffcd\001\002\000\036\016\uffd7\020\uffd7" +
    "\033\uffd7\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042" +
    "\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\047\uffd7\001\002" +
    "\000\004\015\156\001\002\000\036\016\160\020\121\033" +
    "\023\035\013\036\007\037\030\040\051\041\014\042\040" +
    "\043\004\044\034\045\032\046\022\047\031\001\002\000" +
    "\036\016\161\020\121\033\023\035\013\036\007\037\030" +
    "\040\051\041\014\042\040\043\004\044\034\045\032\046" +
    "\022\047\031\001\002\000\040\002\uffce\016\uffce\020\uffce" +
    "\033\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042" +
    "\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\001\002" +
    "\000\040\002\uffcf\016\uffcf\020\uffcf\033\uffcf\035\uffcf\036" +
    "\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf" +
    "\045\uffcf\046\uffcf\047\uffcf\001\002\000\004\004\163\001" +
    "\002\000\036\031\ufff9\032\ufff9\033\ufff9\035\ufff9\036\ufff9" +
    "\037\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045" +
    "\ufff9\046\ufff9\047\ufff9\001\002\000\016\036\007\037\030" +
    "\040\051\041\014\042\040\043\004\001\002\000\024\004" +
    "\uffc7\005\132\006\135\014\uffc7\021\136\025\131\026\127" +
    "\027\133\030\130\001\002\000\004\002\001\001\002\000" +
    "\034\002\uffe8\033\uffe8\035\uffe8\036\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047" +
    "\uffe8\001\002\000\016\036\007\037\030\040\051\041\014" +
    "\042\040\043\004\001\002\000\010\014\175\023\174\024" +
    "\173\001\002\000\030\004\uffde\005\132\006\135\014\uffde" +
    "\021\136\023\uffde\024\uffde\025\131\026\127\027\133\030" +
    "\130\001\002\000\016\036\007\037\030\040\051\041\014" +
    "\042\040\043\004\001\002\000\016\036\007\037\030\040" +
    "\051\041\014\042\040\043\004\001\002\000\004\015\176" +
    "\001\002\000\034\020\121\033\023\035\013\036\007\037" +
    "\030\040\051\041\014\042\040\043\004\044\034\045\032" +
    "\046\022\047\031\001\002\000\036\016\200\020\121\033" +
    "\023\035\013\036\007\037\030\040\051\041\014\042\040" +
    "\043\004\044\034\045\032\046\022\047\031\001\002\000" +
    "\042\002\uffe4\016\uffe4\020\uffe4\033\uffe4\034\201\035\uffe4" +
    "\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044" +
    "\uffe4\045\uffe4\046\uffe4\047\uffe4\001\002\000\004\015\202" +
    "\001\002\000\034\020\121\033\023\035\013\036\007\037" +
    "\030\040\051\041\014\042\040\043\004\044\034\045\032" +
    "\046\022\047\031\001\002\000\036\016\204\020\121\033" +
    "\023\035\013\036\007\037\030\040\051\041\014\042\040" +
    "\043\004\044\034\045\032\046\022\047\031\001\002\000" +
    "\040\002\uffe3\016\uffe3\020\uffe3\033\uffe3\035\uffe3\036\uffe3" +
    "\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045" +
    "\uffe3\046\uffe3\047\uffe3\001\002\000\030\004\uffdf\005\132" +
    "\006\135\014\uffdf\021\136\023\uffdf\024\uffdf\025\131\026" +
    "\127\027\133\030\130\001\002\000\030\004\uffe0\005\132" +
    "\006\135\014\uffe0\021\136\023\uffe0\024\uffe0\025\131\026" +
    "\127\027\133\030\130\001\002\000\020\014\212\036\007" +
    "\037\030\040\051\041\014\042\040\043\004\001\002\000" +
    "\006\014\215\017\214\001\002\000\024\005\132\006\135" +
    "\014\uffed\017\uffed\021\136\025\131\026\127\027\133\030" +
    "\130\001\002\000\040\004\uffdc\005\uffdc\006\uffdc\007\uffdc" +
    "\010\uffdc\011\uffdc\014\uffdc\017\uffdc\021\uffdc\023\uffdc\024" +
    "\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\001\002\000\006" +
    "\014\uffef\017\uffef\001\002\000\016\036\007\037\030\040" +
    "\051\041\014\042\040\043\004\001\002\000\040\004\uffdd" +
    "\005\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\014\uffdd\017" +
    "\uffdd\021\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd" +
    "\030\uffdd\001\002\000\006\014\uffee\017\uffee\001\002\000" +
    "\034\002\uffeb\033\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb" +
    "\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047" +
    "\uffeb\001\002\000\034\002\ufffc\033\023\035\013\036\007" +
    "\037\030\040\051\041\014\042\040\043\004\044\034\045" +
    "\032\046\022\047\031\001\002\000\034\031\ufff7\033\ufff7" +
    "\035\ufff7\036\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043" +
    "\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\001\002\000\014" +
    "\041\014\042\040\044\034\045\032\047\031\001\002\000" +
    "\004\040\051\001\002\000\004\004\236\001\002\000\016" +
    "\036\007\037\030\040\051\041\014\042\040\043\004\001" +
    "\002\000\010\004\227\023\174\024\173\001\002\000\006" +
    "\041\014\042\040\001\002\000\004\014\232\001\002\000" +
    "\004\012\164\001\002\000\004\015\233\001\002\000\034" +
    "\020\121\033\023\035\013\036\007\037\030\040\051\041" +
    "\014\042\040\043\004\044\034\045\032\046\022\047\031" +
    "\001\002\000\036\016\235\020\121\033\023\035\013\036" +
    "\007\037\030\040\051\041\014\042\040\043\004\044\034" +
    "\045\032\046\022\047\031\001\002\000\040\002\uffe2\016" +
    "\uffe2\020\uffe2\033\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\047" +
    "\uffe2\001\002\000\016\036\007\037\030\040\051\041\014" +
    "\042\040\043\004\001\002\000\010\004\240\023\174\024" +
    "\173\001\002\000\006\041\014\042\040\001\002\000\004" +
    "\014\242\001\002\000\004\015\243\001\002\000\034\020" +
    "\121\033\023\035\013\036\007\037\030\040\051\041\014" +
    "\042\040\043\004\044\034\045\032\046\022\047\031\001" +
    "\002\000\036\016\245\020\121\033\023\035\013\036\007" +
    "\037\030\040\051\041\014\042\040\043\004\044\034\045" +
    "\032\046\022\047\031\001\002\000\040\002\uffe1\016\uffe1" +
    "\020\uffe1\033\uffe1\035\uffe1\036\uffe1\037\uffe1\040\uffe1\041" +
    "\uffe1\042\uffe1\043\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1" +
    "\001\002\000\006\004\250\012\247\001\002\000\016\036" +
    "\007\037\030\040\051\041\014\042\040\043\004\001\002" +
    "\000\040\002\uffd1\016\uffd1\020\uffd1\033\uffd1\035\uffd1\036" +
    "\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1" +
    "\045\uffd1\046\uffd1\047\uffd1\001\002\000\022\004\252\005" +
    "\132\006\135\021\136\025\131\026\127\027\133\030\130" +
    "\001\002\000\040\002\uffd0\016\uffd0\020\uffd0\033\uffd0\035" +
    "\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0" +
    "\044\uffd0\045\uffd0\046\uffd0\047\uffd0\001\002\000\010\004" +
    "\250\012\247\013\254\001\002\000\012\014\256\044\034" +
    "\045\032\047\031\001\002\000\006\014\263\017\072\001" +
    "\002\000\004\015\257\001\002\000\036\016\261\020\121" +
    "\033\023\035\013\036\007\037\030\040\051\041\014\042" +
    "\040\043\004\044\034\045\032\046\022\047\031\001\002" +
    "\000\036\016\262\020\121\033\023\035\013\036\007\037" +
    "\030\040\051\041\014\042\040\043\004\044\034\045\032" +
    "\046\022\047\031\001\002\000\040\002\uffc8\016\uffc8\020" +
    "\uffc8\033\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8" +
    "\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\001" +
    "\002\000\040\002\uffc9\016\uffc9\020\uffc9\033\uffc9\035\uffc9" +
    "\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044" +
    "\uffc9\045\uffc9\046\uffc9\047\uffc9\001\002\000\004\015\264" +
    "\001\002\000\036\016\266\020\121\033\023\035\013\036" +
    "\007\037\030\040\051\041\014\042\040\043\004\044\034" +
    "\045\032\046\022\047\031\001\002\000\036\016\267\020" +
    "\121\033\023\035\013\036\007\037\030\040\051\041\014" +
    "\042\040\043\004\044\034\045\032\046\022\047\031\001" +
    "\002\000\040\002\uffca\016\uffca\020\uffca\033\uffca\035\uffca" +
    "\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044" +
    "\uffca\045\uffca\046\uffca\047\uffca\001\002\000\040\002\uffcb" +
    "\016\uffcb\020\uffcb\033\uffcb\035\uffcb\036\uffcb\037\uffcb\040" +
    "\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb" +
    "\047\uffcb\001\002\000\036\031\ufffa\032\ufffa\033\ufffa\035" +
    "\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa" +
    "\044\ufffa\045\ufffa\046\ufffa\047\ufffa\001\002\000\034\031" +
    "\045\033\023\035\013\036\007\037\030\040\051\041\014" +
    "\042\040\043\004\044\034\045\032\046\022\047\031\001" +
    "\002\000\034\002\ufffe\033\023\035\013\036\007\037\030" +
    "\040\051\041\014\042\040\043\004\044\034\045\032\046" +
    "\022\047\031\001\002\000\034\002\ufffd\033\023\035\013" +
    "\036\007\037\030\040\051\041\014\042\040\043\004\044" +
    "\034\045\032\046\022\047\031\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\271\000\062\002\026\003\017\004\035\005\016\006" +
    "\047\007\004\010\032\017\025\020\042\021\015\022\010" +
    "\024\014\025\023\026\046\027\024\030\007\031\034\032" +
    "\020\033\043\034\005\035\045\037\040\040\011\041\041" +
    "\001\001\000\002\001\001\000\054\003\271\004\035\005" +
    "\270\006\047\010\267\017\025\020\042\021\015\022\010" +
    "\025\023\026\046\027\024\030\007\031\034\032\020\033" +
    "\043\034\005\035\045\037\040\040\011\041\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\252\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\003\217\004\035\006\220\017\025\020\042\021\015" +
    "\022\010\025\023\026\046\027\024\030\007\031\034\032" +
    "\020\033\043\034\005\035\045\037\040\040\011\041\041" +
    "\001\001\000\044\004\216\017\025\020\042\021\015\022" +
    "\010\025\023\026\046\027\024\030\007\031\034\032\020" +
    "\033\043\034\005\035\045\037\040\040\011\041\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\033\161\001\001\000\002" +
    "\001\001\000\004\032\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\030\061\037\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\027\057\031\055\032\020" +
    "\033\043\034\005\035\045\040\011\001\001\000\020\027" +
    "\056\031\055\032\020\033\043\034\005\035\045\040\011" +
    "\001\001\000\020\027\054\031\055\032\020\033\043\034" +
    "\005\035\045\040\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\076\001\001\000\004\032\062\001\001\000\002\001\001" +
    "\000\010\013\066\014\065\030\064\001\001\000\004\031" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\074\030\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\100\014" +
    "\065\030\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\110\014\065" +
    "\030\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\050\011\116\012\115\017\124\020\114\021\123\022\117" +
    "\025\122\026\046\027\024\030\007\031\034\032\020\033" +
    "\043\034\005\035\045\036\113\037\040\040\011\041\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\046\012\151\017\124\020\114\021\123\022\117" +
    "\025\122\026\046\027\024\030\007\031\034\032\020\033" +
    "\043\034\005\035\045\036\113\037\040\040\011\041\121" +
    "\001\001\000\002\001\001\000\024\025\147\026\046\027" +
    "\024\031\055\032\020\033\043\034\005\035\045\040\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\026\146" +
    "\027\024\031\055\032\020\033\043\034\005\035\045\040" +
    "\011\001\001\000\022\026\145\027\024\031\055\032\020" +
    "\033\043\034\005\035\045\040\011\001\001\000\022\026" +
    "\144\027\024\031\055\032\020\033\043\034\005\035\045" +
    "\040\011\001\001\000\022\026\143\027\024\031\055\032" +
    "\020\033\043\034\005\035\045\040\011\001\001\000\022" +
    "\026\142\027\024\031\055\032\020\033\043\034\005\035" +
    "\045\040\011\001\001\000\002\001\001\000\022\026\141" +
    "\027\024\031\055\032\020\033\043\034\005\035\045\040" +
    "\011\001\001\000\022\026\136\027\024\031\055\032\020" +
    "\033\043\034\005\035\045\040\011\001\001\000\002\001" +
    "\001\000\022\026\140\027\024\031\055\032\020\033\043" +
    "\034\005\035\045\040\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\011\156\012" +
    "\115\017\124\020\114\021\123\022\117\025\122\026\046" +
    "\027\024\030\007\031\034\032\020\033\043\034\005\035" +
    "\045\036\113\037\040\040\011\041\121\001\001\000\046" +
    "\012\151\017\124\020\114\021\123\022\117\025\122\026" +
    "\046\027\024\030\007\031\034\032\020\033\043\034\005" +
    "\035\045\036\113\037\040\040\011\041\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\025\164\026\046\027\024\031\055\032" +
    "\020\033\043\034\005\035\045\040\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\023" +
    "\170\025\171\026\046\027\024\031\055\032\020\033\043" +
    "\034\005\035\045\040\011\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\025\205\026\046\027\024\031\055" +
    "\032\020\033\043\034\005\035\045\040\011\001\001\000" +
    "\024\025\204\026\046\027\024\031\055\032\020\033\043" +
    "\034\005\035\045\040\011\001\001\000\002\001\001\000" +
    "\050\011\176\012\115\017\124\020\114\021\123\022\117" +
    "\025\122\026\046\027\024\030\007\031\034\032\020\033" +
    "\043\034\005\035\045\036\113\037\040\040\011\041\121" +
    "\001\001\000\046\012\151\017\124\020\114\021\123\022" +
    "\117\025\122\026\046\027\024\030\007\031\034\032\020" +
    "\033\043\034\005\035\045\036\113\037\040\040\011\041" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\050" +
    "\011\202\012\115\017\124\020\114\021\123\022\117\025" +
    "\122\026\046\027\024\030\007\031\034\032\020\033\043" +
    "\034\005\035\045\036\113\037\040\040\011\041\121\001" +
    "\001\000\046\012\151\017\124\020\114\021\123\022\117" +
    "\025\122\026\046\027\024\030\007\031\034\032\020\033" +
    "\043\034\005\035\045\036\113\037\040\040\011\041\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\015\207\016\212\025\210\026\046\027\024" +
    "\031\055\032\020\033\043\034\005\035\045\040\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\016\215\025\210\026\046\027" +
    "\024\031\055\032\020\033\043\034\005\035\045\040\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\044\004\216\017\025\020\042\021\015\022\010" +
    "\025\023\026\046\027\024\030\007\031\034\032\020\033" +
    "\043\034\005\035\045\037\040\040\011\041\041\001\001" +
    "\000\002\001\001\000\010\017\224\030\222\031\223\001" +
    "\001\000\004\032\245\001\001\000\002\001\001\000\026" +
    "\023\225\025\171\026\046\027\024\031\055\032\020\033" +
    "\043\034\005\035\045\040\011\001\001\000\002\001\001" +
    "\000\006\020\227\031\230\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\011\233\012\115" +
    "\017\124\020\114\021\123\022\117\025\122\026\046\027" +
    "\024\030\007\031\034\032\020\033\043\034\005\035\045" +
    "\036\113\037\040\040\011\041\121\001\001\000\046\012" +
    "\151\017\124\020\114\021\123\022\117\025\122\026\046" +
    "\027\024\030\007\031\034\032\020\033\043\034\005\035" +
    "\045\036\113\037\040\040\011\041\121\001\001\000\002" +
    "\001\001\000\026\023\236\025\171\026\046\027\024\031" +
    "\055\032\020\033\043\034\005\035\045\040\011\001\001" +
    "\000\002\001\001\000\006\020\240\031\230\001\001\000" +
    "\002\001\001\000\002\001\001\000\050\011\243\012\115" +
    "\017\124\020\114\021\123\022\117\025\122\026\046\027" +
    "\024\030\007\031\034\032\020\033\043\034\005\035\045" +
    "\036\113\037\040\040\011\041\121\001\001\000\046\012" +
    "\151\017\124\020\114\021\123\022\117\025\122\026\046" +
    "\027\024\030\007\031\034\032\020\033\043\034\005\035" +
    "\045\036\113\037\040\040\011\041\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\025\250\026\046\027" +
    "\024\031\055\032\020\033\043\034\005\035\045\040\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\254\014\065\030\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\011" +
    "\257\012\115\017\124\020\114\021\123\022\117\025\122" +
    "\026\046\027\024\030\007\031\034\032\020\033\043\034" +
    "\005\035\045\036\113\037\040\040\011\041\121\001\001" +
    "\000\046\012\151\017\124\020\114\021\123\022\117\025" +
    "\122\026\046\027\024\030\007\031\034\032\020\033\043" +
    "\034\005\035\045\036\113\037\040\040\011\041\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\011\264\012\115\017\124\020\114\021\123\022" +
    "\117\025\122\026\046\027\024\030\007\031\034\032\020" +
    "\033\043\034\005\035\045\036\113\037\040\040\011\041" +
    "\121\001\001\000\046\012\151\017\124\020\114\021\123" +
    "\022\117\025\122\026\046\027\024\030\007\031\034\032" +
    "\020\033\043\034\005\035\045\036\113\037\040\040\011" +
    "\041\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\050\003\272\004\035\006\220\017\025" +
    "\020\042\021\015\022\010\025\023\026\046\027\024\030" +
    "\007\031\034\032\020\033\043\034\005\035\045\037\040" +
    "\040\011\041\041\001\001\000\044\004\216\017\025\020" +
    "\042\021\015\022\010\025\023\026\046\027\024\030\007" +
    "\031\034\032\020\033\043\034\005\035\045\037\040\040" +
    "\011\041\041\001\001\000\044\004\216\017\025\020\042" +
    "\021\015\022\010\025\023\026\046\027\024\030\007\031" +
    "\034\032\020\033\043\034\005\035\045\037\040\040\011" +
    "\041\041\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



   public JSONArray allNodes = new JSONArray();
   public AbstractNode prog;

   public AbstractNode addAllNodesToJSON (AbstractNode n, boolean addToList) {
        if(n.getChild() != null) {
            n.node.put("Body", AddAllChild(n.getChild(),new JSONArray()));

            if(addToList) {
                allNodes.add(n.node);
            }
        }
        return null;
   }

   public JSONArray AddAllChild (AbstractNode n, JSONArray array) {
       array.add(n.node);
       if(n.getChild() != null) {
           addAllNodesToJSON(n,false);
       }

       if(n.getSib() != null) {
           AddAllChild(n.getSib(),array);
       }
       return array;
   }

   public AbstractNode makeBinaryNode(AbstractNode number1, AbstractNode number2, String operator) {return new BinaryOPNode(number1,number2, operator);}
   public AbstractNode makeIntegerNode(int value) {return new IntegerNode(value);}
   public AbstractNode makeFloatNode(float value) {return new FloatNode(value);}
   public AbstractNode makeVariableDeclarationNode(AbstractNode type, AbstractNode id, AbstractNode body) {return new VariableDeclarationNode(type,id, body);}
   public AbstractNode makeVariableDeclarationNoBody(AbstractNode type, AbstractNode id) {return new VariableDeclarationNode(type,id);}
   public AbstractNode makeTypeNode(String type) {return new TypeNode(type);}
   public AbstractNode makeIdentifierNode(String id, String idType) {return new IdentifierNode(id, idType);}
   public AbstractNode makeAssignmentNode(AbstractNode set, AbstractNode to) {return new AssignmentNode(set,to);}
   public AbstractNode makeFunctionDecNode(AbstractNode type, AbstractNode id, AbstractNode parems) {return new FunctionDecNode(type,id,parems);}
   public AbstractNode makeFunctionDecNodeNoParams(AbstractNode type, AbstractNode id) {return new FunctionDecNode(type,id);}
   public AbstractNode makeFunctionDefNode(AbstractNode type, AbstractNode id, AbstractNode params, AbstractNode body) {return new FunctionDefNode(type,id,params,body);}
   public AbstractNode makeFunctionDefNodeNoBody(AbstractNode type, AbstractNode id, AbstractNode params) {return new FunctionDefNode(type,id,params);}
   public AbstractNode makeFunctionDefNodeNoParams(AbstractNode type, AbstractNode id, String params, AbstractNode body) {return new FunctionDefNode(type,id,params,body);}
   public AbstractNode makeFunctionDefNodeNoBodyNoParams(AbstractNode type, AbstractNode id) {return new FunctionDefNode(type,id);}
   public AbstractNode makeReturnStatement(AbstractNode argument) {return new ReturnStatementNode(argument);}
   public AbstractNode makeFunctionCall(AbstractNode id, AbstractNode params) {return new FunctionCallNode(id, params);}
   public AbstractNode makeFunctionCallNoParams(AbstractNode id) {return new FunctionCallNode(id);}
   public AbstractNode makeIfStatementNode(AbstractNode test, AbstractNode ifBody) {return new IfStatementNode(test, ifBody);}
   public AbstractNode makeIfElseStatementNode(AbstractNode test, AbstractNode ifBody, AbstractNode elseBody) {return new IfStatementNode(test,ifBody,elseBody);}
   public AbstractNode makeConditionNode (String operator, AbstractNode left, AbstractNode right) {return new ConditionNode(operator,left,right);}
   public AbstractNode makeStringNode(String value) {return new StringNode(value);}
   public AbstractNode makeImportNode(AbstractNode name) {return new ImportNode(name);}
   public AbstractNode makeForLoopNode(AbstractNode initCase, AbstractNode testCase, AbstractNode continueCase, AbstractNode body) {return new ForLoopNode(initCase,testCase,continueCase,body);}

   public void WriteAST (String fileName) {
        try (FileWriter file = new FileWriter("src/main/resources/" + fileName)) {
            //We can write any JSONArray or JSONObject instance to the file
            file.write(allNodes.toJSONString());
            file.flush();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // String ::= STRING_LITERAL 
            {
              AbstractNode RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeStringNode(sl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("String",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Decimal ::= DECIMAL 
            {
              AbstractNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeFloatNode(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decimal",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Literal ::= INTEGER 
            {
              AbstractNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeIntegerNode(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VoidType ::= VOID_TYPE 
            {
              AbstractNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeTypeNode("void");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VoidType",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // TypeName ::= STRING_TYPE 
            {
              AbstractNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeTypeNode("string");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeName",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // TypeName ::= DECIMAL_TYPE 
            {
              AbstractNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeTypeNode("decimal"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeName",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TypeName ::= INT_TYPE 
            {
              AbstractNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeTypeNode("int"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeName",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Identifier ::= IDENTIFIERVAL 
            {
              AbstractNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeIdentifierNode(id, "val"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Identifier",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Identifier ::= IDENTIFIERADR 
            {
              AbstractNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeIdentifierNode(id, "adr"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Identifier",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OnlyIdentifier ::= IDENTIFIER 
            {
              AbstractNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeIdentifierNode(id,""); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OnlyIdentifier",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // UnaryExpr ::= FunctionCall 
            {
              AbstractNode RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode fc = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaryExpr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // UnaryExpr ::= String 
            {
              AbstractNode RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode s = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaryExpr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // UnaryExpr ::= Identifier 
            {
              AbstractNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaryExpr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // UnaryExpr ::= Decimal 
            {
              AbstractNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode n = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaryExpr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // UnaryExpr ::= Literal 
            {
              AbstractNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode n = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaryExpr",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // MultiplicativeExpr ::= UnaryExpr 
            {
              AbstractNode RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode e2 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // MultiplicativeExpr ::= MultiplicativeExpr MOD UnaryExpr 
            {
              AbstractNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode e1 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode e2 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeBinaryNode(e1, e2, "%"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // MultiplicativeExpr ::= MultiplicativeExpr DIVIDE UnaryExpr 
            {
              AbstractNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode e1 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode e2 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeBinaryNode(e1, e2, "/"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // MultiplicativeExpr ::= MultiplicativeExpr TIMES UnaryExpr 
            {
              AbstractNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode e1 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode e2 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeBinaryNode(e1, e2, "*"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // AdditiveExpr ::= MultiplicativeExpr 
            {
              AbstractNode RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode e2 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // AdditiveExpr ::= AdditiveExpr IS MultiplicativeExpr 
            {
              AbstractNode RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode s1 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode a1 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeBinaryNode(s1, a1,"IS");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // AdditiveExpr ::= AdditiveExpr IS NOT MultiplicativeExpr 
            {
              AbstractNode RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractNode s1 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode a1 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeBinaryNode( s1,a1, "IS_NOT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // AdditiveExpr ::= AdditiveExpr GREATER_EQUALS MultiplicativeExpr 
            {
              AbstractNode RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode s1 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode a1 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeBinaryNode( s1, a1, "GREATER_EQUALS"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // AdditiveExpr ::= AdditiveExpr GREATER MultiplicativeExpr 
            {
              AbstractNode RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode s1 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode a1 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeBinaryNode(s1,a1, "GREATER"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // AdditiveExpr ::= AdditiveExpr LESSER_EQUALS MultiplicativeExpr 
            {
              AbstractNode RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode s1 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode a1 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeBinaryNode( s1,a1, "LESSER_EQUALS"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // AdditiveExpr ::= AdditiveExpr LESSER MultiplicativeExpr 
            {
              AbstractNode RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode s1 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode a1 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeBinaryNode( s1,a1, "LESSER");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // AdditiveExpr ::= AdditiveExpr MINUS MultiplicativeExpr 
            {
              AbstractNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode e1 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode e2 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeBinaryNode(e1, e2, "-"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // AdditiveExpr ::= AdditiveExpr PLUS MultiplicativeExpr 
            {
              AbstractNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode e1 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode e2 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeBinaryNode(e1, e2, "+"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Assignment ::= Identifier EQUALS AdditiveExpr 
            {
              AbstractNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode e = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeAssignmentNode(id,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Assignment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FunctionDefinition ::= TypeName OnlyIdentifier LEFT_PAREN RIGHT_PAREN LEFT_CURLY RIGHT_CURLY 
            {
              AbstractNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AbstractNode t = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = makeFunctionDefNodeNoBodyNoParams(t,id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDefinition",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FunctionDefinition ::= TypeName OnlyIdentifier LEFT_PAREN RIGHT_PAREN LEFT_CURLY FunctionBodyDeclarations RIGHT_CURLY 
            {
              AbstractNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		AbstractNode t = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode fds = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = makeFunctionDefNodeNoParams(t,id,"null",fds); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDefinition",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FunctionDefinition ::= TypeName OnlyIdentifier LEFT_PAREN Params RIGHT_PAREN LEFT_CURLY RIGHT_CURLY 
            {
              AbstractNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		AbstractNode t = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractNode pas = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = makeFunctionDefNodeNoBody(t,id,pas); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDefinition",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FunctionDefinition ::= TypeName OnlyIdentifier LEFT_PAREN Params RIGHT_PAREN LEFT_CURLY FunctionBodyDeclarations RIGHT_CURLY 
            {
              AbstractNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		AbstractNode t = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AbstractNode pas = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode fds = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = makeFunctionDefNode(t,id,pas,fds); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDefinition",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FunctionDefinition ::= VoidType OnlyIdentifier LEFT_PAREN RIGHT_PAREN LEFT_CURLY RIGHT_CURLY 
            {
              AbstractNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AbstractNode t = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = makeFunctionDefNodeNoBodyNoParams(t,id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDefinition",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FunctionDefinition ::= VoidType OnlyIdentifier LEFT_PAREN RIGHT_PAREN LEFT_CURLY FunctionBodyDeclarations RIGHT_CURLY 
            {
              AbstractNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		AbstractNode t = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode fds = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = makeFunctionDefNodeNoParams(t,id,"null",fds); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDefinition",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FunctionDefinition ::= VoidType OnlyIdentifier LEFT_PAREN Params RIGHT_PAREN LEFT_CURLY RIGHT_CURLY 
            {
              AbstractNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		AbstractNode t = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractNode pas = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = makeFunctionDefNodeNoBody(t,id,pas); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDefinition",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FunctionDefinition ::= VoidType OnlyIdentifier LEFT_PAREN Params RIGHT_PAREN LEFT_CURLY FunctionBodyDeclarations RIGHT_CURLY 
            {
              AbstractNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		AbstractNode t = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AbstractNode pas = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode fds = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = makeFunctionDefNode(t,id,pas,fds); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDefinition",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TypeDeclaration ::= TypeName OnlyIdentifier EQUALS AdditiveExpr SEMI 
            {
              AbstractNode RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AbstractNode tn = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode e = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = makeVariableDeclarationNode(tn,id,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeDeclaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TypeDeclaration ::= TypeName OnlyIdentifier SEMI 
            {
              AbstractNode RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode tn = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = makeVariableDeclarationNoBody(tn,id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeDeclaration",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ReturnStmt ::= RETURN AdditiveExpr SEMI 
            {
              AbstractNode RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode ae = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = makeReturnStatement(ae); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnStmt",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FunctionBodyDeclaration ::= FunctionDefinition 
            {
              AbstractNode RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode fd = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionBodyDeclaration",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // FunctionBodyDeclaration ::= IterativeStmt 
            {
              AbstractNode RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode is = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = is; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionBodyDeclaration",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FunctionBodyDeclaration ::= SelectiveStmt 
            {
              AbstractNode RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode ss = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ss; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionBodyDeclaration",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FunctionBodyDeclaration ::= ReturnStmt 
            {
              AbstractNode RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode rs = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionBodyDeclaration",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FunctionBodyDeclaration ::= Assignment SEMI 
            {
              AbstractNode RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode as = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = as; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionBodyDeclaration",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FunctionBodyDeclaration ::= AdditiveExpr SEMI 
            {
              AbstractNode RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode ae = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ae; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionBodyDeclaration",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FunctionBodyDeclaration ::= TypeDeclaration 
            {
              AbstractNode RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode td = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = td; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionBodyDeclaration",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FunctionBodyDeclarations ::= FunctionBodyDeclarations FunctionBodyDeclaration 
            {
              AbstractNode RESULT =null;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode fds = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode fd = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fds.makeSibling(fd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionBodyDeclarations",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FunctionBodyDeclarations ::= FunctionBodyDeclaration 
            {
              AbstractNode RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode fd = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionBodyDeclarations",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FunctionCall ::= OnlyIdentifier LEFT_PAREN RIGHT_PAREN 
            {
              AbstractNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = makeFunctionCallNoParams(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionCall",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FunctionCall ::= OnlyIdentifier LEFT_PAREN CallParams RIGHT_PAREN 
            {
              AbstractNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cpsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cpsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode cps = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = makeFunctionCall(id,cps); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionCall",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LogicalStmt ::= AdditiveExpr 
            {
              AbstractNode RESULT =null;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode a1 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalStmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LogicalStmt ::= LogicalStmt OR AdditiveExpr 
            {
              AbstractNode RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode s1 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode a1 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeConditionNode("OR", a1, s1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalStmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LogicalStmt ::= LogicalStmt AND AdditiveExpr 
            {
              AbstractNode RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode s1 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int a1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int a1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode a1 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeConditionNode("AND", a1, s1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LogicalStmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IterativeStmt ::= FOR LEFT_PAREN Identifier SEMI LogicalStmt SEMI Assignment RIGHT_PAREN LEFT_CURLY FunctionBodyDeclarations RIGHT_CURLY 
            {
              AbstractNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		AbstractNode ls = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AbstractNode as = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode fds = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = makeForLoopNode(id,ls,as,fds); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IterativeStmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IterativeStmt ::= FOR LEFT_PAREN TypeDeclaration LogicalStmt SEMI Assignment RIGHT_PAREN LEFT_CURLY FunctionBodyDeclarations RIGHT_CURLY 
            {
              AbstractNode RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		AbstractNode td = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		AbstractNode ls = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AbstractNode as = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode fds = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = makeForLoopNode(td,ls,as,fds); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IterativeStmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SelectiveStmt ::= IF LEFT_PAREN LogicalStmt RIGHT_PAREN LEFT_CURLY FunctionBodyDeclarations RIGHT_CURLY ELSE LEFT_CURLY FunctionBodyDeclarations RIGHT_CURLY 
            {
              AbstractNode RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		AbstractNode ls = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AbstractNode fds = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fds2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fds2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode fds2 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = makeIfElseStatementNode(ls,fds,fds2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SelectiveStmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SelectiveStmt ::= IF LEFT_PAREN LogicalStmt RIGHT_PAREN LEFT_CURLY FunctionBodyDeclarations RIGHT_CURLY 
            {
              AbstractNode RESULT =null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AbstractNode ls = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode fds = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = makeIfStatementNode(ls,fds); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SelectiveStmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FieldDeclaration ::= IterativeStmt 
            {
              AbstractNode RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode is = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = is; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FieldDeclaration ::= SelectiveStmt 
            {
              AbstractNode RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode ss = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ss; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FieldDeclaration ::= Assignment SEMI 
            {
              AbstractNode RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode as = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = as; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FieldDeclaration ::= AdditiveExpr SEMI 
            {
              AbstractNode RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode ae = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = ae; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FieldDeclaration ::= FunctionDefinition 
            {
              AbstractNode RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode fd = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FieldDeclaration ::= TypeDeclaration 
            {
              AbstractNode RESULT =null;
		int tdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode tds = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tds; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FieldDeclarations ::= FieldDeclarations FieldDeclaration 
            {
              AbstractNode RESULT =null;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode fds = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode fd = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fds.makeSibling(fd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldDeclarations",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FieldDeclarations ::= FieldDeclaration 
            {
              AbstractNode RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode fd = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldDeclarations",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CallParam ::= AdditiveExpr 
            {
              AbstractNode RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode ae = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ae; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallParam",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CallParams ::= CallParams COMMA CallParam 
            {
              AbstractNode RESULT =null;
		int cpsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cpsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode cps = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode cp = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cps.makeSibling(cp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallParams",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CallParams ::= CallParam 
            {
              AbstractNode RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode cp = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallParams",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Param ::= TypeName Identifier 
            {
              AbstractNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode t = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeVariableDeclarationNoBody(t, id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Param",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Params ::= Params COMMA Param 
            {
              AbstractNode RESULT =null;
		int pasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode pas = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode pa = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pas.makeSibling(pa); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Params",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Params ::= Param 
            {
              AbstractNode RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode pa = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pa;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Params",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FunctionDeclaration ::= PROTOTYPE VoidType OnlyIdentifier LEFT_PAREN RIGHT_PAREN SEMI 
            {
              AbstractNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AbstractNode t = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  RESULT = makeFunctionDecNodeNoParams(t,id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDeclaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FunctionDeclaration ::= PROTOTYPE VoidType OnlyIdentifier LEFT_PAREN Params RIGHT_PAREN SEMI 
            {
              AbstractNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AbstractNode t = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode pas = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = makeFunctionDecNode(t,id,pas); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDeclaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FunctionDeclaration ::= PROTOTYPE TypeName OnlyIdentifier LEFT_PAREN RIGHT_PAREN SEMI 
            {
              AbstractNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AbstractNode t = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  RESULT = makeFunctionDecNodeNoParams(t,id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDeclaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FunctionDeclaration ::= PROTOTYPE TypeName OnlyIdentifier LEFT_PAREN Params RIGHT_PAREN SEMI 
            {
              AbstractNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AbstractNode t = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode pas = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = makeFunctionDecNode(t,id,pas); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDeclaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // FunctionDeclarations ::= FunctionDeclarations FunctionDeclaration 
            {
              AbstractNode RESULT =null;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode fds = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode fd = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fds.makeSibling(fd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDeclarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // FunctionDeclarations ::= FunctionDeclaration 
            {
              AbstractNode RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode fd = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDeclarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Import ::= IMPORT String SEMI 
            {
              AbstractNode RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode st = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = makeImportNode(st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Import",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Imports ::= Imports Import 
            {
              AbstractNode RESULT =null;
		int imsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int imsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode ims = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int imleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int imright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode im = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ims.makeSibling(im); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Imports",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Imports ::= Import 
            {
              AbstractNode RESULT =null;
		int imleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int imright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode im = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = im; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Imports",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Body ::= FunctionDeclarations FieldDeclarations 
            {
              AbstractNode RESULT =null;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode fds = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode fd = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fds.makeSibling(fd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Body ::= Imports FunctionDeclarations FieldDeclarations 
            {
              AbstractNode RESULT =null;
		int imsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int imsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode ims = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fdssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode fdss = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode fds = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ims.makeSibling(fdss).makeSibling(fds); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Body ::= Imports FieldDeclarations 
            {
              AbstractNode RESULT =null;
		int imsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int imsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode ims = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode fds = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ims.makeSibling(fds); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Body ::= FieldDeclarations 
            {
              AbstractNode RESULT =null;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode fds = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fds; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // CompilationUnit ::= Body 
            {
              AbstractNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode b = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    prog = new ProgramNode(b);
    prog.node.put("type", "Program");

    prog.adoptChildren(b);
    addAllNodesToJSON(prog,true);


              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompilationUnit",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= CompilationUnit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode start_val = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

