
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Apr 23 14:18:46 CEST 2021
//----------------------------------------------------

import java_cup.runtime.*;
import lab7.*;
import AST.*;
import java.io.FileWriter;
import java.io.IOException;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Apr 23 14:18:46 CEST 2021
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\070\000\002\002\004\000\002\002\003\000\002\022" +
    "\003\000\002\022\004\000\002\005\003\000\002\005\004" +
    "\000\002\006\011\000\002\011\003\000\002\011\005\000" +
    "\002\012\004\000\002\013\003\000\002\013\005\000\002" +
    "\014\003\000\002\003\003\000\002\003\004\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\033\003\000\002\033\004\000\002\034\007\000" +
    "\002\034\006\000\002\007\003\000\002\007\004\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\015\003\000\002\015\004\000\002\016\005" +
    "\000\002\016\007\000\002\016\012\000\002\016\011\000" +
    "\002\017\003\000\002\017\004\000\002\020\006\000\002" +
    "\021\005\000\002\021\004\000\002\023\005\000\002\023" +
    "\005\000\002\023\003\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\027\003\000\002" +
    "\026\003\000\002\026\003\000\002\030\003\000\002\031" +
    "\003\000\002\032\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\016\021\031\022\034\023\007\024\011\025" +
    "\032\026\017\001\002\000\022\004\uffd3\005\uffd3\006\uffd3" +
    "\007\uffd3\010\uffd3\011\uffd3\014\uffd3\017\uffd3\001\002\000" +
    "\022\002\uffde\016\uffde\020\uffde\022\uffde\023\uffde\024\uffde" +
    "\025\uffde\026\uffde\001\002\000\004\002\142\001\002\000" +
    "\022\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb" +
    "\014\uffcb\017\uffcb\001\002\000\016\002\ufff0\022\ufff0\023" +
    "\ufff0\024\011\025\ufff0\026\ufff0\001\002\000\026\004\uffcf" +
    "\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013" +
    "\uffcf\014\uffcf\017\uffcf\001\002\000\010\004\141\005\061" +
    "\006\063\001\002\000\004\024\011\001\002\000\016\002" +
    "\uffef\022\uffef\023\uffef\024\011\025\uffef\026\uffef\001\002" +
    "\000\016\002\uffee\022\uffee\023\uffee\024\uffee\025\uffee\026" +
    "\uffee\001\002\000\016\021\031\022\034\023\007\024\011" +
    "\025\032\026\017\001\002\000\004\024\uffcd\001\002\000" +
    "\022\002\uffe4\016\uffe4\020\uffe4\022\uffe4\023\uffe4\024\uffe4" +
    "\025\uffe4\026\uffe4\001\002\000\022\004\uffd0\005\uffd0\006" +
    "\uffd0\007\uffd0\010\uffd0\011\uffd0\012\070\013\071\001\002" +
    "\000\016\002\uffff\022\034\023\007\024\011\025\032\026" +
    "\017\001\002\000\016\002\ufff2\022\ufff2\023\ufff2\024\ufff2" +
    "\025\032\026\017\001\002\000\016\002\ufff4\022\ufff4\023" +
    "\ufff4\024\ufff4\025\ufff4\026\ufff4\001\002\000\022\004\uffd1" +
    "\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1\014\uffd1\017" +
    "\uffd1\001\002\000\004\002\000\001\002\000\016\021\ufffd" +
    "\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\001\002\000" +
    "\016\002\ufff1\022\034\023\007\024\011\025\ufff1\026\ufff1" +
    "\001\002\000\006\025\032\026\017\001\002\000\004\024" +
    "\uffce\001\002\000\022\004\uffd7\005\uffd7\006\uffd7\007\040" +
    "\010\037\011\036\014\uffd7\017\uffd7\001\002\000\022\004" +
    "\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\014\uffcc" +
    "\017\uffcc\001\002\000\022\004\uffd2\005\uffd2\006\uffd2\007" +
    "\uffd2\010\uffd2\011\uffd2\014\uffd2\017\uffd2\001\002\000\010" +
    "\022\034\023\007\024\011\001\002\000\010\022\034\023" +
    "\007\024\011\001\002\000\010\022\034\023\007\024\011" +
    "\001\002\000\022\004\uffd6\005\uffd6\006\uffd6\007\uffd6\010" +
    "\uffd6\011\uffd6\014\uffd6\017\uffd6\001\002\000\022\004\uffd0" +
    "\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\014\uffd0\017" +
    "\uffd0\001\002\000\022\004\uffd5\005\uffd5\006\uffd5\007\uffd5" +
    "\010\uffd5\011\uffd5\014\uffd5\017\uffd5\001\002\000\022\004" +
    "\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4\014\uffd4" +
    "\017\uffd4\001\002\000\004\024\011\001\002\000\004\013" +
    "\047\001\002\000\006\025\032\026\017\001\002\000\004" +
    "\024\011\001\002\000\006\014\ufffa\017\ufffa\001\002\000" +
    "\006\014\054\017\053\001\002\000\006\025\032\026\017" +
    "\001\002\000\004\004\055\001\002\000\016\021\ufffb\022" +
    "\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\001\002\000\006" +
    "\014\ufff9\017\ufff9\001\002\000\006\014\ufff8\017\ufff8\001" +
    "\002\000\010\004\062\005\061\006\063\001\002\000\010" +
    "\022\034\023\007\024\011\001\002\000\022\002\uffdb\016" +
    "\uffdb\020\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\001\002\000\010\022\034\023\007\024\011\001\002\000" +
    "\022\004\uffd8\005\uffd8\006\uffd8\007\040\010\037\011\036" +
    "\014\uffd8\017\uffd8\001\002\000\022\004\uffd9\005\uffd9\006" +
    "\uffd9\007\040\010\037\011\036\014\uffd9\017\uffd9\001\002" +
    "\000\022\002\uffe3\016\uffe3\020\uffe3\022\uffe3\023\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\001\002\000\016\002\ufff3\022\ufff3" +
    "\023\ufff3\024\ufff3\025\ufff3\026\ufff3\001\002\000\010\022" +
    "\034\023\007\024\011\001\002\000\012\014\075\022\034" +
    "\023\007\024\011\001\002\000\006\014\100\017\077\001" +
    "\002\000\006\014\ufff7\017\ufff7\001\002\000\012\005\061" +
    "\006\063\014\ufff5\017\ufff5\001\002\000\004\004\076\001" +
    "\002\000\016\002\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\001\002\000\010\022\034\023\007\024\011\001" +
    "\002\000\004\004\101\001\002\000\016\002\uffec\022\uffec" +
    "\023\uffec\024\uffec\025\uffec\026\uffec\001\002\000\006\014" +
    "\ufff6\017\ufff6\001\002\000\010\004\104\005\061\006\063" +
    "\001\002\000\022\002\uffdc\016\uffdc\020\uffdc\022\uffdc\023" +
    "\uffdc\024\uffdc\025\uffdc\026\uffdc\001\002\000\016\002\ufffe" +
    "\022\034\023\007\024\011\025\032\026\017\001\002\000" +
    "\016\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc\026\ufffc" +
    "\001\002\000\016\002\uffed\022\uffed\023\uffed\024\uffed\025" +
    "\uffed\026\uffed\001\002\000\004\013\071\001\002\000\010" +
    "\004\114\012\112\013\113\001\002\000\010\022\034\023" +
    "\007\024\011\001\002\000\006\025\032\026\017\001\002" +
    "\000\022\002\uffe2\016\uffe2\020\uffe2\022\uffe2\023\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\001\002\000\006\014\116\017\053" +
    "\001\002\000\004\015\117\001\002\000\020\016\130\020" +
    "\124\022\034\023\007\024\011\025\032\026\017\001\002" +
    "\000\020\016\uffe5\020\uffe5\022\uffe5\023\uffe5\024\uffe5\025" +
    "\uffe5\026\uffe5\001\002\000\020\016\uffea\020\uffea\022\uffea" +
    "\023\uffea\024\uffea\025\uffea\026\uffea\001\002\000\020\016" +
    "\136\020\124\022\034\023\007\024\011\025\032\026\017" +
    "\001\002\000\020\016\uffe6\020\uffe6\022\uffe6\023\uffe6\024" +
    "\011\025\uffe6\026\uffe6\001\002\000\010\022\034\023\007" +
    "\024\011\001\002\000\020\004\uffd0\005\uffd0\006\uffd0\007" +
    "\uffd0\010\uffd0\011\uffd0\012\070\001\002\000\020\016\uffe8" +
    "\020\uffe8\022\uffe8\023\uffe8\024\uffe8\025\032\026\017\001" +
    "\002\000\020\016\uffe7\020\uffe7\022\034\023\007\024\011" +
    "\025\uffe7\026\uffe7\001\002\000\022\002\uffdf\016\uffdf\020" +
    "\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\001\002" +
    "\000\010\004\132\005\061\006\063\001\002\000\020\016" +
    "\uffca\020\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026\uffca" +
    "\001\002\000\022\002\uffdd\016\uffdd\020\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\025\uffdd\026\uffdd\001\002\000\004\012\070" +
    "\001\002\000\020\016\uffe9\020\uffe9\022\uffe9\023\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\001\002\000\022\002\uffe0\016\uffe0" +
    "\020\uffe0\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\001" +
    "\002\000\010\004\140\005\061\006\063\001\002\000\022" +
    "\002\uffe1\016\uffe1\020\uffe1\022\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\001\002\000\022\002\uffda\016\uffda\020\uffda" +
    "\022\uffda\023\uffda\024\uffda\025\uffda\026\uffda\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\052\002\005\003\021\004\023\005\015\006" +
    "\026\015\022\016\017\017\007\020\004\021\027\022\025" +
    "\023\011\024\032\025\003\026\012\027\020\030\034\031" +
    "\024\033\013\034\014\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\020" +
    "\132\027\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\027\110\001\001\000\006\027\107\034\106\001" +
    "\001\000\002\001\001\000\044\003\104\004\023\006\105" +
    "\015\022\016\017\017\007\020\004\021\027\023\011\024" +
    "\032\025\003\026\012\027\020\030\034\031\024\033\013" +
    "\034\014\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\004\066\015\022\016\017\017\007" +
    "\020\004\021\027\023\011\024\032\025\003\026\012\027" +
    "\020\030\034\031\024\033\013\034\014\001\001\000\006" +
    "\016\065\026\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\023\057" +
    "\024\032\025\003\027\041\030\034\031\024\001\001\000" +
    "\004\026\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\025\043\027" +
    "\041\030\034\031\024\001\001\000\012\025\042\027\041" +
    "\030\034\031\024\001\001\000\012\025\040\027\041\030" +
    "\034\031\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\027\045\001" +
    "\001\000\002\001\001\000\010\011\051\012\050\026\047" +
    "\001\001\000\004\027\056\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\055\026\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\024\064\025\003\027\041" +
    "\030\034\031\024\001\001\000\002\001\001\000\014\024" +
    "\063\025\003\027\041\030\034\031\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\023\102\024\032\025\003\027\041\030\034" +
    "\031\024\001\001\000\022\013\071\014\072\023\073\024" +
    "\032\025\003\027\041\030\034\031\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\014\101\023\073\024\032" +
    "\025\003\027\041\030\034\031\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\004\066\015\022\016\017\017" +
    "\007\020\004\021\027\023\011\024\032\025\003\026\012" +
    "\027\020\030\034\031\024\033\013\034\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\023\136\024\032\025\003\027\041\030" +
    "\034\031\024\001\001\000\010\011\114\012\050\026\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\007\121\010\120\015\125\016\017\017\122" +
    "\020\004\021\126\023\011\024\032\025\003\026\012\027" +
    "\124\030\034\031\024\032\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\010\134\015\125\016\017\017" +
    "\122\020\004\021\126\023\011\024\032\025\003\026\012" +
    "\027\124\030\034\031\024\032\117\001\001\000\006\020" +
    "\132\027\133\001\001\000\016\023\130\024\032\025\003" +
    "\027\041\030\034\031\024\001\001\000\002\001\001\000" +
    "\006\016\065\026\012\001\001\000\016\023\057\024\032" +
    "\025\003\027\041\030\034\031\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



   public JSONArray allNodes = new JSONArray();
   public JSONArray allNodesUnderProg = new JSONArray();
   public JSONArray expressions = new JSONArray();

   public AbstractNode prog;
      public AbstractNode addAllNodesToJSON (AbstractNode n, boolean addToList) {
                     if(n.getChild() != null) {
                         n.node.put("Body", AddAllChild(n.getChild(),new JSONArray()));
                         if(addToList) {
                             allNodes.add(n.node);
                         }
                     }
                     return null;
                 }

                 public JSONArray AddAllChild (AbstractNode n, JSONArray array) {
                     array.add(n.node);
                     if(n.getChild() != null)
                     {
                         addAllNodesToJSON(n,false);
                     }

                     if(n.getSib() != null) {
                         AddAllChild(n.getSib(),array);
                     }
                     return array;
                 }

   public AbstractNode makeNode(AbstractNode number1, AbstractNode number2, String operator) {return new BinaryOPNode(number1,number2, operator);}
   public AbstractNode makeNode(int value) {return new IntegerNode(value);}
   public AbstractNode makeNode(float value) {return new FloatNode(value);}
   public AbstractNode makeNode(AbstractNode type, AbstractNode id, AbstractNode body) {return new VariableDeclarationNode(type,id, body);}

   public AbstractNode makeVariableDeclarationNoBody(AbstractNode type, AbstractNode id) {return new VariableDeclarationNode(type,id);}
   public AbstractNode makeTypeNode(String type) {return new TypeNode(type);}
   public AbstractNode makeIdentifierNode(String id) {return new IdentifierNode(id);}
   public AbstractNode makeAssignmentNode(AbstractNode set, AbstractNode to) {return new AssignmentNode(set,to);}
   public AbstractNode makeFunctionDecNode(AbstractNode type, AbstractNode id, AbstractNode parems) {return new FunctionDecNode(type,id,parems);}
   public AbstractNode makeFunctionDefNode(AbstractNode type, AbstractNode id, AbstractNode params, AbstractNode body) {return new FunctionDefNode(type,id,params,body);}
   public AbstractNode makeFunctionDefNodeNoBody(AbstractNode type, AbstractNode id, AbstractNode params) {return new FunctionDefNode(type,id,params);}
   public AbstractNode makeReturnStatement(AbstractNode argument) {return new ReturnStatementNode(argument);}
   public AbstractNode makeFunctionCall(AbstractNode id, AbstractNode params) {return new FunctionCallNode(id, params);}
   public AbstractNode makeFunctionCallNoParams(AbstractNode id) {return new FunctionCallNode(id);}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ReturnStmt ::= RETURN AdditiveExpr SEMI 
            {
              AbstractNode RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode ae = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		  RESULT = makeReturnStatement(ae); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnStmt",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Decimal ::= DECIMAL 
            {
              AbstractNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float n = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeNode(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decimal",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Literal ::= INTEGER 
            {
              AbstractNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeNode(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TypeName ::= DECIMAL_TYPE 
            {
              AbstractNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeTypeNode("decimal"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeName",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TypeName ::= INT_TYPE 
            {
              AbstractNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeTypeNode("int"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeName",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Identifier ::= IDENTIFIER 
            {
              AbstractNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeIdentifierNode(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Identifier",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // UnaryExpr ::= Identifier 
            {
              AbstractNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = id; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaryExpr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // UnaryExpr ::= Decimal 
            {
              AbstractNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode n = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaryExpr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // UnaryExpr ::= Literal 
            {
              AbstractNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode n = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UnaryExpr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MultiplicativeExpr ::= UnaryExpr 
            {
              AbstractNode RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode e2 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MultiplicativeExpr ::= MultiplicativeExpr MOD UnaryExpr 
            {
              AbstractNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode e1 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode e2 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeNode(e1, e2, "%"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MultiplicativeExpr ::= MultiplicativeExpr DIVIDE UnaryExpr 
            {
              AbstractNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode e1 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode e2 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeNode(e1, e2, "/"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MultiplicativeExpr ::= MultiplicativeExpr TIMES UnaryExpr 
            {
              AbstractNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode e1 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode e2 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeNode(e1, e2, "*"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MultiplicativeExpr",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // AdditiveExpr ::= MultiplicativeExpr 
            {
              AbstractNode RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode e2 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e2; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // AdditiveExpr ::= AdditiveExpr MINUS MultiplicativeExpr 
            {
              AbstractNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode e1 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode e2 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeNode(e1, e2, "-"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AdditiveExpr ::= AdditiveExpr PLUS MultiplicativeExpr 
            {
              AbstractNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode e1 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode e2 = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeNode(e1, e2, "+"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AdditiveExpr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ListExpr ::= AdditiveExpr SEMI 
            {
              AbstractNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode e = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ListExpr ::= ListExpr AdditiveExpr SEMI 
            {
              AbstractNode RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode el = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode e = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = el.makeSibling(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ListExpr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Assignment ::= Identifier EQUALS AdditiveExpr SEMI 
            {
              AbstractNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode e = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = makeAssignmentNode(id,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Assignment",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Assignments ::= Assignments Assignment 
            {
              AbstractNode RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode as = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode a = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = as.makeSibling(a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Assignments",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Assignments ::= Assignment 
            {
              AbstractNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode a = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Assignments",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TypeDeclaration ::= TypeName Identifier LEFT_PAREN Params RIGHT_PAREN LEFT_CURLY RIGHT_CURLY 
            {
              AbstractNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		AbstractNode t = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractNode pas = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = makeFunctionDefNodeNoBody(t,id,pas); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeDeclaration",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TypeDeclaration ::= TypeName Identifier LEFT_PAREN Params RIGHT_PAREN LEFT_CURLY FunctionBodyDeclarations RIGHT_CURLY 
            {
              AbstractNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		AbstractNode t = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AbstractNode pas = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode fds = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = makeFunctionDefNode(t,id,pas,fds); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeDeclaration",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TypeDeclaration ::= TypeName Identifier EQUALS AdditiveExpr SEMI 
            {
              AbstractNode RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AbstractNode tn = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode e = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = makeNode(tn,id,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeDeclaration",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TypeDeclaration ::= TypeName Identifier SEMI 
            {
              AbstractNode RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode tn = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = makeVariableDeclarationNoBody(tn,id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeDeclaration",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TypeDeclarations ::= TypeDeclarations TypeDeclaration 
            {
              AbstractNode RESULT =null;
		int tdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode tds = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode td = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tds.makeSibling(td); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeDeclarations",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TypeDeclarations ::= TypeDeclaration 
            {
              AbstractNode RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode td = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = td; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeDeclarations",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FunctionBodyDeclaration ::= ReturnStmt 
            {
              AbstractNode RESULT =null;
		int rsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode rs = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = rs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionBodyDeclaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FunctionBodyDeclaration ::= Assignments 
            {
              AbstractNode RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode as = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = as; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionBodyDeclaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FunctionBodyDeclaration ::= ListExpr 
            {
              AbstractNode RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode el = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = el; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionBodyDeclaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FunctionBodyDeclaration ::= TypeDeclarations 
            {
              AbstractNode RESULT =null;
		int tdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode tds = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tds;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionBodyDeclaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FunctionBodyDeclarations ::= FunctionBodyDeclarations FunctionBodyDeclaration 
            {
              AbstractNode RESULT =null;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode fds = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode fd = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fds.makeSibling(fd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionBodyDeclarations",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FunctionBodyDeclarations ::= FunctionBodyDeclaration 
            {
              AbstractNode RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode fd = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionBodyDeclarations",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FunctionCall ::= Identifier LEFT_PAREN RIGHT_PAREN SEMI 
            {
              AbstractNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		  RESULT = makeFunctionCallNoParams(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionCall",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FunctionCall ::= Identifier LEFT_PAREN CallParams RIGHT_PAREN SEMI 
            {
              AbstractNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cpsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cpsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode cps = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = makeFunctionCall(id,cps);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionCall",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FunctionCalls ::= FunctionCalls FunctionCall 
            {
              AbstractNode RESULT =null;
		int fcsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fcsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode fcs = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode fc = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fcs.makeSibling(fc); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionCalls",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FunctionCalls ::= FunctionCall 
            {
              AbstractNode RESULT =null;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode fc = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fc;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionCalls",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // FieldDeclaration ::= FunctionCalls 
            {
              AbstractNode RESULT =null;
		int fcsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode fcs = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fcs;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // FieldDeclaration ::= Assignments 
            {
              AbstractNode RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode as = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = as; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FieldDeclaration ::= ListExpr 
            {
              AbstractNode RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode el = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = el; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FieldDeclaration ::= TypeDeclarations 
            {
              AbstractNode RESULT =null;
		int tdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode tds = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tds;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // FieldDeclarations ::= FieldDeclarations FieldDeclaration 
            {
              AbstractNode RESULT =null;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode fds = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode fd = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fds.makeSibling(fd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldDeclarations",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // FieldDeclarations ::= FieldDeclaration 
            {
              AbstractNode RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode fd = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FieldDeclarations",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CallParam ::= AdditiveExpr 
            {
              AbstractNode RESULT =null;
		int aeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode ae = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ae; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallParam",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CallParams ::= CallParams COMMA CallParam 
            {
              AbstractNode RESULT =null;
		int cpsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cpsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode cps = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode cp = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cps.makeSibling(cp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallParams",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CallParams ::= CallParam 
            {
              AbstractNode RESULT =null;
		int cpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode cp = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = cp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallParams",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Param ::= TypeName Identifier 
            {
              AbstractNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode t = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = makeVariableDeclarationNoBody(t, id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Param",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Params ::= Params COMMA Param 
            {
              AbstractNode RESULT =null;
		int pasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode pas = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode pa = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pas.makeSibling(pa); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Params",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Params ::= Param 
            {
              AbstractNode RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode pa = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pa;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Params",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // FunctionDeclaration ::= PROTOTYPE TypeName Identifier LEFT_PAREN Params RIGHT_PAREN SEMI 
            {
              AbstractNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AbstractNode t = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AbstractNode id = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AbstractNode pas = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		  RESULT = makeFunctionDecNode(t,id,pas); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDeclaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // FunctionDeclarations ::= FunctionDeclarations FunctionDeclaration 
            {
              AbstractNode RESULT =null;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode fds = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode fd = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fds.makeSibling(fd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDeclarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // FunctionDeclarations ::= FunctionDeclaration 
            {
              AbstractNode RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode fd = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fd; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDeclarations",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Body ::= FunctionDeclarations FieldDeclarations 
            {
              AbstractNode RESULT =null;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode fds = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode fd = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fds.makeSibling(fd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Body ::= FieldDeclarations 
            {
              AbstractNode RESULT =null;
		int fdsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fdsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode fds = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = fds; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // CompilationUnit ::= Body 
            {
              AbstractNode RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AbstractNode b = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    prog = new ProgramNode(b);
    prog.node.put("type", "Program");

    prog.adoptChildren(b);
    addAllNodesToJSON(prog,true);


     try (FileWriter file = new FileWriter("ast.json")) {
                //We can write any JSONArray or JSONObject instance to the file
                file.write(allNodes.toJSONString());
                file.flush();

     } catch (IOException e) {
         e.printStackTrace();
     }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CompilationUnit",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= CompilationUnit EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AbstractNode start_val = (AbstractNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

